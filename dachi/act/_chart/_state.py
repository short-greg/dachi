from __future__ import annotations
from typing import Any, AsyncIterator, Dict, List, Optional, Union, Literal

JSON = Union[Dict[str, Any], List[Any], str, int, float, bool, None]


class State(BaseModule):
    # ----- Declarative sugar (optional) -----
    class inputs: ...
    class emit: ...

    # ----- Spec/runtime hooks -----
    def __post_init__(self) -> None: ...
    def enter(self) -> None: ...
    async def run(self, *, post: "Post", **inputs: Any) -> AsyncIterator[None]: ...
    def exit(self) -> None: ...
    def is_final(self) -> bool: ...


class FinalState(State):
    # FinalState has no long-running work; entering it marks the region complete.
    def __post_init__(self) -> None: ...
    def enter(self) -> None: ...
    def exit(self) -> None: ...
    def is_final(self) -> bool: ...


class StepState(State):
    # Optional sugar: implement step(); the framework drives it inside run().
    async def step(self, *, post: "Post", **inputs: Any) -> AsyncIterator[None]: ...
